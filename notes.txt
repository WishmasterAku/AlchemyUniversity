Modulus Operator
Time to learn a new operator: %

This operator is called the modulus operator. It will tell us the remainder of a division.

When you divide 8 by 3 you get 2 and two-thirds. Or 2 with a remainder of 2.

The expression 8 % 3 evaluates to that remainder: 2

Let's take a look at a few examples:

console.log(8 % 3) // 2
console.log(5 % 2) // 1
console.log(7 % 4) // 3
 Let's examine how we can use modulus in loops!

 Your Goal: Modulus Scream
Let's modify our function to return a scream alternating between lower and capital case. For example:
console.log( scream(5) ); // aAaAa
console.log( scream(10) ); // aAaAaAaAaA
 We'll need to add a capital "A" and lower-case "a" on alternating iterations. How might we do this with the modulus operator?


 Modulus in Loops
 How many even numbers are there from 1 to 11?

 How might we program a computer to figure this out?

First, we need to figure out how to recognize an even number! Let's say we have some number num:


Here we have a boolean isEven that will tell us whether or not remainder is 0. When the remainder is 0, the num is evenly divisible by 2. When a number is evenly divisible by 2, it is even by definition!

To get a count from 1 to 11 of the total even numbers we could simply use a for loop like we have been doing:

let count = 0;
for(let i = 1; i <= 11; i++) {
    const remainder = i % 2;
    const isEven = remainder === 0;
    if(isEven) {
        count++;
    }
}
console.log(count); // 5
We get a count of 5 because there are 5 even numbers between 1 and 11. The numbers are 2, 4, 6, 8, and 10!

############

Top Double

The goal is to double a value until just before it reaches a top.

Let's say our value is 2 and our top is 100. We would double it like so:

2, 4, 8, 16, 32, 64, 128

 We start at 2, double to 4, 8, so on until 128. We recognize 128 is larger than our top 100 so we return 64. This is the top double for 2 before 100.

The expected result for topDouble(2, 100) would be 64.

 Another loop that will be useful for this task is the while loop.

 Your Goal: Complete the Top Double
Using whichever loop you'd like, complete the top double function to find the largest double for the value that is below the top.
 This one is a bit tricky! You might double the value before realizing it is larger than top. You'll need to go back and return the value before that value that exceeds the top.


 While Loop
A new useful type of loop for this challenge is the while loop:

while(b > 5) {
    // do something
}
Below you can see we are simply providing a condition true that this statement will execute until that condition is false.

Also helpful is the break statement:

while(true) {
    if(a > 2) {
        // exit the loop
        break;
    }
}
Once break is hit, we will exit the loop. Even though the condition is true the break statement still gives us a way to exit the loop.

 You can also exit a loop by using return, which will exit the function and return the value you designate.


 #########